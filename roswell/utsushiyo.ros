#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  (unless (find-package :utsushiyo)
    (ql:quickload '(utsushiyo) :silent t)))

(defpackage :ros.script.utsushiyo
  (:use :cl)
  (:import-from :utsushiyo
  		:make-project-env
  		:delete-project-env
		:ensure-project-env
  		:config-dir
  		:get-help
		:*utsushiyo-project*
		:bootstrap
                :project-config-bootstrap
		:get-help))
(in-package :ros.script.utsushiyo)

(defgeneric get-option-and-value (option argument))
(defmethod get-option-and-value ((option string) (argument-list list))
  (values
   (when (position option argument-list :test #'string=)
     (nth (1+ (position option argument-list :test #'string=))
	  argument-list))
   (when (find option argument-list :test #'string=) t)))
(defmethod get-option-and-value ((option-list list) (argument-list list))
  (loop for option in option-list
	when (position option argument-list :test #'string=)
	  return (values
		  (when (position option argument-list :test #'string=)
		    (nth (1+ (position option argument-list :test #'string=))
			 argument-list))
		  (when (find option argument-list :test #'string=) t))))

(defmacro if-match ((sym (&rest argv) (&rest arg-list)) &body body)
  `(let* ((tmp (gensym))
	  (,sym tmp))
     (declare (ignorable ,sym))
     (multiple-value-bind (value t-f)
	 (get-option-and-value '(,@arg-list) ',argv)
       (cond ((and value t-f) ;; option and value
	      (setf ,sym value)
	      ,@body)
	     ((and (not value) t-f) ;; only option
	      (setf ,sym value)
	      :single)
	     (t ;; nothing
	      :unknown)))))

(defmacro defmain ((arg) &body mainbody)
  `(defun main (&rest argv)
     (declare (ignorable argv))
     (let* ((tmp ',arg)
	    (code
	      `(let ((,tmp ',argv))
		 (declare (ignorable ,tmp))
		 (list 
		  ,@(loop for b in ',mainbody
			  collect `(if-match (,(first (first b)) ,argv ,(second (first b)))
				     ,(second b)))))))
       (eval code))))

(defmain (arg)
  ((project ("help" "--help" "-h"))
   (cond ((equal project :unknown) "")
	 ((equal project :single)
	  (format t "~A~%"
		  (utsushiyo::get-help utsushiyo::*utsushiyo-project* "bin-general-help")))
	 (t
	  (format t "~A~%" (utsushiyo:get-help project (third arg))))))
  ((project ("init" "--init" "-i"))
   (cond ((equal project :unknown) "")
	 ((equal project :single)
	  (utsushiyo:bootstrap))
	 (t
	  (utsushiyo:bootstrap))))
  ((project ("new-project" "--new-project" "-n"))
   (cond ((equal project :unknown) "")
	 ((equal project :single)
	  (format t "~A~%"
		  (utsushiyo:get-help utsushiyo::*utsushiyo-project* "bin-new-project-help")))
	 (t
	  (utsushiyo:project-config-bootstrap project))))
  ((project ("set-attribute" "--set-attribute" "-s"))
   (cond ((equal project :unknown) "")
	 ((equal project :single)
	  (format t "~A~%"
		  (utsushiyo:get-help utsushiyo::*utsushiyo-project* "bin-set-attribute-help")))
	 (t
	  (utsushiyo:set-attribute project (second arg) (third arg)))))
  ((project ("get-attribute" "--get-attribute" "-g"))
   (cond ((equal project :unknown) "")
	 ((equal project :single)
	  (format t "~A~%"
		  (utsushiyo:get-help utsushiyo::*utsushiyo-project* "bin-get-attribute-help")))
	 (t
	  (utsushiyo:get-attribute project (second arg))))))

;;; vim: set ft=lisp lisp:
